"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pinata";
exports.ids = ["vendor-chunks/pinata"];
exports.modules = {

/***/ "(rsc)/./node_modules/pinata/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/pinata/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PinataSDK: () => (/* binding */ PinataSDK)\n/* harmony export */ });\n// src/utils/custom-errors.ts\nvar PinataError = class extends Error {\n  constructor(message, statusCode, details) {\n    super(message);\n    this.statusCode = statusCode;\n    this.details = details;\n    this.name = \"PinataError\";\n  }\n};\nvar NetworkError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"NetworkError\";\n  }\n};\nvar AuthenticationError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"AuthenticationError\";\n  }\n};\nvar ValidationError = class extends PinataError {\n  constructor(message, details) {\n    super(message, void 0, details);\n    this.name = \"ValidationError\";\n  }\n};\n\n// src/core/authentication/testAuthentication.ts\nvar testAuthentication = async (config) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/testAuthentication\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/testAuthentication`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing authentication: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while testing authentication\"\n    );\n  }\n};\n\n// src/utils/resumable.ts\nfunction getFileIdFromUrl(url) {\n  const match = url.match(/\\/files\\/([^\\/]+)/);\n  if (match && match[1]) {\n    return match[1];\n  }\n  throw new NetworkError(\"File ID not found in URL\", 400, url);\n}\n\n// src/core/uploads/file.ts\nvar uploadFile = async (config, file, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config.pinataJwt;\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  if (file.size > 94371840) {\n    let headers2;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers2 = {\n        Authorization: `Bearer ${jwt}`,\n        ...config.customHeaders\n      };\n    } else {\n      headers2 = {\n        Authorization: `Bearer ${jwt}`,\n        Source: \"sdk/file\"\n      };\n    }\n    const name = options?.metadata?.name || file.name || \"File from SDK\";\n    let metadata = `filename ${btoa(name)},filetype ${btoa(file.type)}`;\n    if (options?.groupId) {\n      metadata + `,group_id ${btoa(options.groupId)}`;\n    }\n    if (options?.metadata?.keyvalues) {\n      metadata + `,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n    }\n    const urlReq = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers: {\n        \"Upload-Length\": `${file.size}`,\n        \"Upload-Metadata\": metadata,\n        ...headers2\n      }\n    });\n    const url = urlReq.headers.get(\"Location\");\n    if (!url) {\n      throw new NetworkError(\"Upload URL not provided\", urlReq.status, \"\");\n    }\n    const chunkSize = 50 * 1024 * 1024;\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let offset = 0;\n    let uploadReq;\n    for (let i = 0; i < totalChunks; i++) {\n      const chunk = file.slice(offset, offset + chunkSize);\n      uploadReq = await fetch(url, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/offset+octet-stream\",\n          \"Upload-Offset\": offset.toString(),\n          ...headers2\n        },\n        body: chunk\n      });\n      if (!uploadReq.ok) {\n        const errorData = await uploadReq.text();\n        throw new NetworkError(\n          `HTTP error during chunk upload: ${errorData}`,\n          uploadReq.status,\n          errorData\n        );\n      }\n      offset += chunk.size;\n    }\n    if (uploadReq.status === 204) {\n      const fileId = getFileIdFromUrl(url);\n      let dataEndpoint;\n      if (config.endpointUrl) {\n        dataEndpoint = config.endpointUrl;\n      } else {\n        dataEndpoint = \"https://api.pinata.cloud/v3\";\n      }\n      const fileInfoReq = await fetch(`${dataEndpoint}/files/${fileId}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${process.env.PINATA_JWT}`\n        }\n      });\n      const fileInfo = await fileInfoReq.json();\n      const data2 = fileInfo.data;\n      return data2;\n    }\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/file\"\n    };\n  }\n  const data = new FormData();\n  data.append(\"file\", file, file.name);\n  data.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error uploading file: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading the file\");\n  }\n};\n\n// src/core/uploads/base64.ts\nvar uploadBase64 = async (config, base64String, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const name = options?.metadata?.name ? options?.metadata?.name : \"base64 string\";\n  const buffer = Buffer.from(base64String, \"base64\");\n  const blob = new Blob([buffer]);\n  const data = new FormData();\n  data.append(\"file\", blob, name);\n  data.append(\"name\", name);\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/base64\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing base64: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while trying to upload base64\"\n    );\n  }\n};\n\n// src/core/uploads/url.ts\nvar uploadUrl = async (config, url, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const data = new FormData();\n  const stream = await fetch(url);\n  if (!stream.ok) {\n    const errorData = await stream.text();\n    throw new NetworkError(\n      `HTTP error: ${errorData}`,\n      stream.status,\n      errorData\n    );\n  }\n  const arrayBuffer = await stream.arrayBuffer();\n  const blob = new Blob([arrayBuffer]);\n  const name = options?.metadata?.name ?? \"url_upload\";\n  const file = new File([blob], name);\n  data.append(\"file\", file, name);\n  data.append(\"name\", name);\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/url\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing url: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading by url\");\n  }\n};\n\n// src/core/uploads/json.ts\nvar uploadJson = async (config, jsonData, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const json = JSON.stringify(jsonData);\n  const blob = new Blob([json]);\n  const file = new File([blob], \"data.json\", { type: \"application/json\" });\n  const data = new FormData();\n  data.append(\"file\", file, file.name);\n  data.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/json\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing json: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading json\");\n  }\n};\n\n// src/core/files/delete.ts\nvar wait = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar deleteFile = async (config, files) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/deleteFile\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of files) {\n    try {\n      const response = await fetch(`${endpoint}/files/${id}`, {\n        method: \"DELETE\",\n        headers\n      });\n      await wait(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          response.status,\n          errorData\n        );\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error deleting file ${id}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while deleting file ${id}`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/files/list.ts\nvar listFiles = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      name,\n      group,\n      cid,\n      order,\n      limit,\n      mimeType,\n      pageToken,\n      cidPending,\n      metadata,\n      noGroup\n    } = options;\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (name)\n      params.append(\"name\", name);\n    if (group)\n      params.append(\"group\", group);\n    if (cid)\n      params.append(\"cid\", cid);\n    if (mimeType)\n      params.append(\"mimeType\", mimeType);\n    if (order)\n      params.append(\"order\", order);\n    if (pageToken)\n      params.append(\"pageToken\", pageToken);\n    if (cidPending)\n      params.append(\"cidPending\", \"true\");\n    if (noGroup)\n      params.append(\"group\", \"null\");\n    if (metadata && typeof metadata === \"object\") {\n      Object.entries(metadata).forEach(([key, value]) => {\n        params.append(`metadata[${key}]`, value.toString());\n      });\n    }\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/files?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        ...config.customHeaders\n      };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/listFiles\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing list files: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing files\");\n  }\n};\n\n// src/core/files/updateFile.ts\nvar updateFile = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  if (!options.name && (!options.keyvalues || Object.keys(options.keyvalues).length === 0)) {\n    throw new ValidationError(\n      \"At least one of 'name' or 'keyvalues' must be provided\"\n    );\n  }\n  const data = {};\n  if (options.name !== void 0) {\n    data.name = options.name;\n  }\n  if (options.keyvalues && Object.keys(options.keyvalues).length > 0) {\n    data.keyvalues = options.keyvalues;\n  }\n  const body = JSON.stringify(data);\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateMetadata\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/${options.id}`, {\n      method: \"PUT\",\n      headers,\n      body\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing updateFile: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while updating file\");\n  }\n};\n\n// src/core/gateway/getCid.ts\nvar getCid = async (config, cid, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let data;\n  let newUrl = `${config?.pinataGateway}/files/${cid}`;\n  const params = new URLSearchParams();\n  if (options) {\n    if (options.width)\n      params.append(\"img-width\", options.width.toString());\n    if (options.height)\n      params.append(\"img-height\", options.height.toString());\n    if (options.dpr)\n      params.append(\"img-dpr\", options.dpr.toString());\n    if (options.fit)\n      params.append(\"img-fit\", options.fit);\n    if (options.gravity)\n      params.append(\"img-gravity\", options.gravity);\n    if (options.quality)\n      params.append(\"img-quality\", options.quality.toString());\n    if (options.format)\n      params.append(\"img-format\", options.format);\n    if (options.animation !== void 0)\n      params.append(\"img-anim\", options.animation.toString());\n    if (options.sharpen)\n      params.append(\"img-sharpen\", options.sharpen.toString());\n    if (options.onError === true)\n      params.append(\"img-onerror\", \"redirect\");\n    if (options.metadata)\n      params.append(\"img-metadata\", options.metadata);\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    newUrl += `?${queryString}`;\n  }\n  const date = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);\n  const payload = JSON.stringify({\n    url: newUrl,\n    date,\n    expires: 30,\n    method: \"GET\"\n  });\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/getCid\"\n    };\n  }\n  const signedUrlRequest = await fetch(`${endpoint}/files/sign`, {\n    method: \"POST\",\n    headers,\n    body: payload\n  });\n  const signedUrl = await signedUrlRequest.json();\n  try {\n    const request = await fetch(signedUrl.data);\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const contentType = request.headers.get(\"content-type\")?.split(\";\")[0] || null;\n    if (contentType?.includes(\"application/json\")) {\n      data = await request.json();\n    } else if (contentType?.includes(\"text/\")) {\n      data = await request.text();\n    } else {\n      data = await request.blob();\n    }\n    const res = {\n      data,\n      contentType\n    };\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing getCid: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting CID contents\"\n    );\n  }\n};\n\n// src/core/keys/createKey.ts\nvar createKey = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createKey\"\n    };\n  }\n  const data = JSON.stringify(options);\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinata/keys`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing createKey: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while creating API key\");\n  }\n};\n\n// src/core/keys/listKeys.ts\nvar listKeys = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listKeys\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { offset, name, revoked, limitedUse, exhausted } = options;\n    if (offset)\n      params.append(\"offset\", offset.toString());\n    if (revoked !== void 0)\n      params.append(\"revoked\", revoked.toString());\n    if (limitedUse !== void 0)\n      params.append(\"limitedUse\", limitedUse.toString());\n    if (exhausted !== void 0)\n      params.append(\"exhausted\", exhausted.toString());\n    if (name)\n      params.append(\"name\", name);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/pinata/keys?${params.toString()}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.keys;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing listKeys: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing API keys\");\n  }\n};\n\n// src/core/keys/revokeKeys.ts\nvar wait2 = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar revokeKeys = async (config, keys) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/revokeKeys\"\n    };\n  }\n  const responses = [];\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const key of keys) {\n    try {\n      const request = await fetch(`${endpoint}/pinata/keys/${key}`, {\n        method: \"PUT\",\n        headers\n      });\n      await wait2(300);\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      const result = await request.json();\n      responses.push({\n        key,\n        status: result\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error revoking key ${key}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while revoking key ${key}`;\n      }\n      responses.push({\n        key,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/groups/createGroup.ts\nvar createGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    name: options.name,\n    is_public: options.isPublic\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/groups`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing createGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while creating a group\");\n  }\n};\n\n// src/core/groups/listGroups.ts\nvar listGroups = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listGroups\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { pageToken, name, limit, isPublic } = options;\n    if (pageToken)\n      params.append(\"pageToken\", pageToken.toString());\n    if (isPublic)\n      params.append(\"isPublic\", isPublic.toString());\n    if (name)\n      params.append(\"name\", name);\n    if (limit !== void 0)\n      params.append(\"limit\", limit.toString());\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/groups?${params.toString()}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing listGroups: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing groups\");\n  }\n};\n\n// src/core/groups/getGroup.ts\nvar getGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/groups/${options.groupId}`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing getGroup: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting info for a group\"\n    );\n  }\n};\n\n// src/core/groups/addToGroup.ts\nvar addToGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const wait3 = (milliseconds) => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, milliseconds);\n    });\n  };\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addToGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of options.files) {\n    try {\n      const response = await fetch(\n        `${endpoint}/files/groups/${options.groupId}/ids/${id}`,\n        {\n          method: \"PUT\",\n          headers\n        }\n      );\n      await wait3(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          response.status,\n          errorData\n        );\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error adding file ${id} to group: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while adding file ${id} to group`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/groups/updateGroup.ts\nvar updateGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    name: options.name,\n    is_public: options.isPublic\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/groups/${options.groupId}`, {\n      method: \"PUT\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing updateGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while updating group\");\n  }\n};\n\n// src/core/groups/removeFromGroup.ts\nvar removeFromGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const wait3 = (milliseconds) => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, milliseconds);\n    });\n  };\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addToGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of options.files) {\n    try {\n      const response = await fetch(\n        `${endpoint}/files/groups/${options.groupId}/ids/${id}`,\n        {\n          method: \"DELETE\",\n          headers\n        }\n      );\n      await wait3(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          response.status,\n          errorData\n        );\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error adding file ${id} to group: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while adding file ${id} to group`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/groups/deleteGroup.ts\nvar deleteGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/groups/${options.groupId}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = request.statusText;\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing deleteGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while deleting a group\");\n  }\n};\n\n// src/core/analytics/analyticsTopUsage.ts\nvar analyticsTopUsage = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      sort_by,\n      attribute\n    } = options;\n    const domain = gateway_domain || config.pinataGateway;\n    if (domain) {\n      const cleanDomain = domain.replace(/^https?:\\/\\//, \"\");\n      params.append(\"gateway_domain\", cleanDomain);\n    }\n    if (cid) {\n      params.append(\"cid\", cid);\n    }\n    if (start_date)\n      params.append(\"start_date\", start_date);\n    if (end_date)\n      params.append(\"end_date\", end_date);\n    if (file_name)\n      params.append(\"file_name\", file_name);\n    if (user_agent)\n      params.append(\"user_agent\", user_agent.toString());\n    if (country)\n      params.append(\"country\", country.toString());\n    if (region)\n      params.append(\"region\", region);\n    if (referer)\n      params.append(\"referer\", referer.toString());\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (sort_order)\n      params.append(\"sort_order\", sort_order);\n    if (sort_by)\n      params.append(\"sort_by\", sort_by);\n    if (attribute)\n      params.append(\"by\", attribute);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/ipfs/gateway_analytics_top?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsTopUsage\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/analytics/analyticsDateInterval.ts\nvar analyticsDateInterval = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      date_interval,\n      sort_by\n    } = options;\n    if (cid)\n      params.append(\"cid\", cid);\n    if (gateway_domain)\n      params.append(\"gateway_domain\", gateway_domain);\n    if (start_date)\n      params.append(\"start_date\", start_date);\n    if (end_date)\n      params.append(\"end_date\", end_date);\n    if (file_name)\n      params.append(\"file_name\", file_name);\n    if (user_agent)\n      params.append(\"user_agent\", user_agent.toString());\n    if (country)\n      params.append(\"country\", country.toString());\n    if (region)\n      params.append(\"region\", region);\n    if (referer)\n      params.append(\"referer\", referer.toString());\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (sort_order)\n      params.append(\"sort_order\", sort_order);\n    if (sort_by)\n      params.append(\"sort_by\", sort_by);\n    if (date_interval)\n      params.append(\"by\", date_interval);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/ipfs/gateway_analytics_time_series?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsDateInterval\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/files/swapCid.ts\nvar swapCid = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    swap_cid: options.swapCid\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapCid\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/swap/${options.cid}`, {\n      method: \"PUT\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 403) {\n        throw new PinataError(\n          \"Unauthorized CID Swap\",\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID not pinned to account\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing CID Swap: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while swapping CID\");\n  }\n};\n\n// src/core/files/swapHistory.ts\nvar swapHistory = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapHistory\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/swap/${options.cid}?domain=${options.domain}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID does not have history\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error fetching swap history: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching swap history\"\n    );\n  }\n};\n\n// src/core/files/deleteSwap.ts\nvar deleteSwap = async (config, cid) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteSwap\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/swap/${cid}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 403) {\n        throw new PinataError(\n          \"Unauthorized CID Swap Deletion\",\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID not pinned to account\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    return request.statusText;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing deleteSwap: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while deleting swap\");\n  }\n};\n\n// src/core/gateway/createSignedURL.ts\nvar createSignedURL = async (config, options, imgOpts) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let baseUrl;\n  if (options?.gateway) {\n    baseUrl = options.gateway.startsWith(\"https://\") ? options.gateway : `https://${options.gateway}`;\n  } else {\n    baseUrl = config.pinataGateway;\n  }\n  let newUrl = `${baseUrl}/files/${options.cid}`;\n  const params = new URLSearchParams();\n  if (imgOpts) {\n    if (imgOpts.width)\n      params.append(\"img-width\", imgOpts.width.toString());\n    if (imgOpts.height)\n      params.append(\"img-height\", imgOpts.height.toString());\n    if (imgOpts.dpr)\n      params.append(\"img-dpr\", imgOpts.dpr.toString());\n    if (imgOpts.fit)\n      params.append(\"img-fit\", imgOpts.fit);\n    if (imgOpts.gravity)\n      params.append(\"img-gravity\", imgOpts.gravity);\n    if (imgOpts.quality)\n      params.append(\"img-quality\", imgOpts.quality.toString());\n    if (imgOpts.format)\n      params.append(\"img-format\", imgOpts.format);\n    if (imgOpts.animation !== void 0)\n      params.append(\"img-anim\", imgOpts.animation.toString());\n    if (imgOpts.sharpen)\n      params.append(\"img-sharpen\", imgOpts.sharpen.toString());\n    if (imgOpts.onError === true)\n      params.append(\"img-onerror\", \"redirect\");\n    if (imgOpts.metadata)\n      params.append(\"img-metadata\", imgOpts.metadata);\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    newUrl += `?${queryString}`;\n  }\n  const date = options?.date || Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);\n  const payload = JSON.stringify({\n    url: newUrl,\n    date,\n    expires: options.expires,\n    method: \"GET\"\n  });\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/createSignURL\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/sign`, {\n      method: \"POST\",\n      headers,\n      body: payload\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing createSignedURL: ${error.message}`\n      );\n    }\n    throw new PinataError(\"An unknown error occurred while getting signed url\");\n  }\n};\n\n// src/core/pinataSDK.ts\nvar formatConfig = (config) => {\n  let gateway = config?.pinataGateway;\n  if (config && gateway) {\n    if (gateway && !gateway.startsWith(\"https://\")) {\n      gateway = `https://${gateway}`;\n    }\n    config.pinataGateway = gateway;\n  }\n  return config;\n};\nvar PinataSDK = class {\n  //signatures: Signatures;\n  constructor(config) {\n    this.config = formatConfig(config);\n    this.files = new Files(this.config);\n    this.upload = new Upload(this.config);\n    this.gateways = new Gateways(this.config);\n    this.keys = new Keys(this.config);\n    this.groups = new Groups(this.config);\n    this.analytics = new Analytics(this.config);\n  }\n  setNewHeaders(headers) {\n    if (!this.config) {\n      this.config = { pinataJwt: \"\", customHeaders: {} };\n    }\n    this.config.customHeaders = { ...this.config.customHeaders, ...headers };\n    this.files.updateConfig(this.config);\n    this.upload.updateConfig(this.config);\n    this.gateways.updateConfig(this.config);\n    this.keys.updateConfig(this.config);\n    this.groups.updateConfig(this.config);\n    this.analytics.updateConfig(this.config);\n  }\n  setNewJwt(jwt) {\n    if (!this.config) {\n      this.config = { pinataJwt: \"\" };\n    }\n    this.config.pinataJwt = jwt;\n    this.files.updateConfig(this.config);\n    this.upload.updateConfig(this.config);\n    this.gateways.updateConfig(this.config);\n    this.keys.updateConfig(this.config);\n    this.groups.updateConfig(this.config);\n    this.analytics.updateConfig(this.config);\n  }\n  testAuthentication() {\n    return testAuthentication(this.config);\n  }\n};\nvar Files = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  list() {\n    return new FilterFiles(this.config);\n  }\n  delete(files) {\n    return deleteFile(this.config, files);\n  }\n  update(options) {\n    return updateFile(this.config, options);\n  }\n  addSwap(options) {\n    return swapCid(this.config, options);\n  }\n  getSwapHistory(options) {\n    return swapHistory(this.config, options);\n  }\n  deleteSwap(cid) {\n    return deleteSwap(this.config, cid);\n  }\n};\nvar UploadBuilder = class {\n  constructor(config, uploadFunction, ...args) {\n    this.config = config;\n    this.uploadFunction = uploadFunction;\n    this.args = args;\n  }\n  addMetadata(metadata) {\n    this.metadata = metadata;\n    return this;\n  }\n  key(jwt) {\n    this.keys = jwt;\n    return this;\n  }\n  // cidVersion(v: 0 | 1): UploadBuilder<T> {\n  // \tthis.version = v;\n  // \treturn this;\n  // }\n  group(groupId) {\n    this.groupId = groupId;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    const options = this.args[this.args.length - 1] || {};\n    if (this.metadata) {\n      options.metadata = this.metadata;\n    }\n    if (this.keys) {\n      options.keys = this.keys;\n    }\n    if (this.groupId) {\n      options.groupId = this.groupId;\n    }\n    this.args[this.args.length - 1] = options;\n    return this.uploadFunction(this.config, ...this.args).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\nvar Upload = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  file(file, options) {\n    return new UploadBuilder(this.config, uploadFile, file, options);\n  }\n  // fileArray(\n  // \tfiles: FileObject[],\n  // \toptions?: UploadOptions,\n  // ): UploadBuilder<UploadResponse> {\n  // \treturn new UploadBuilder(this.config, uploadFileArray, files, options);\n  // }\n  base64(base64String, options) {\n    return new UploadBuilder(this.config, uploadBase64, base64String, options);\n  }\n  url(url, options) {\n    return new UploadBuilder(this.config, uploadUrl, url, options);\n  }\n  json(data, options) {\n    return new UploadBuilder(this.config, uploadJson, data, options);\n  }\n};\nvar FilterFiles = class {\n  // rate limit vars\n  // private requestCount = 0;\n  // private lastRequestTime = 0;\n  // private readonly MAX_REQUESTS_PER_MINUTE = 30;\n  // private readonly MINUTE_IN_MS = 60000;\n  constructor(config) {\n    this.query = {};\n    this.config = config;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  group(group) {\n    this.query.group = group;\n    return this;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  mimeType(mimeType) {\n    this.query.mimeType = mimeType;\n    return this;\n  }\n  order(order) {\n    this.query.order = order;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  cidPending(cidPending) {\n    this.query.cidPending = cidPending;\n    return this;\n  }\n  metadata(keyvalues) {\n    this.query.metadata = keyvalues;\n    return this;\n  }\n  noGroup(noGroup) {\n    this.query.noGroup = noGroup;\n    return this;\n  }\n  pageToken(pageToken) {\n    this.query.pageToken = pageToken;\n    return this;\n  }\n  then(onfulfilled) {\n    return this.fetchPage().then(onfulfilled);\n  }\n  async fetchPage() {\n    if (this.currentPageToken) {\n      this.query.pageToken = this.currentPageToken;\n    }\n    const response = await listFiles(this.config, this.query);\n    this.currentPageToken = response.next_page_token;\n    return response;\n  }\n  // // rate limit, hopefully temporary?\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      const items = await this.fetchPage();\n      for (const item of items.files) {\n        yield item;\n      }\n      if (!this.currentPageToken) {\n        break;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Gateways = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  get(cid) {\n    return new OptimizeImageGetCid(this.config, cid);\n  }\n  createSignedURL(options) {\n    return new OptimizeImageCreateSignedURL(this.config, options);\n  }\n  // topUsageAnalytics(options: {\n  // \tdomain: string;\n  // \tstart: string;\n  // \tend: string;\n  // \tsortBy: \"requests\" | \"bandwidth\";\n  // \tattribute:\n  // \t\t| \"cid\"\n  // \t\t| \"country\"\n  // \t\t| \"region\"\n  // \t\t| \"user_agent\"\n  // \t\t| \"referer\"\n  // \t\t| \"file_name\";\n  // }): TopGatewayAnalyticsBuilder {\n  // \treturn new TopGatewayAnalyticsBuilder(\n  // \t\tthis.config,\n  // \t\toptions.domain,\n  // \t\toptions.start,\n  // \t\toptions.end,\n  // \t\toptions.sortBy,\n  // \t\toptions.attribute,\n  // \t);\n  // }\n  // dateIntervalAnalytics(options: {\n  // \tdomain: string;\n  // \tstart: string;\n  // \tend: string;\n  // \tinterval: \"day\" | \"week\";\n  // }): TimeIntervalGatewayAnalyticsBuilder {\n  // \treturn new TimeIntervalGatewayAnalyticsBuilder(\n  // \t\tthis.config,\n  // \t\toptions.domain,\n  // \t\toptions.start,\n  // \t\toptions.end,\n  // \t\toptions.interval,\n  // \t);\n  // }\n};\nvar OptimizeImageGetCid = class {\n  constructor(config, cid) {\n    this.options = {};\n    this.config = config;\n    this.cid = cid;\n  }\n  optimizeImage(options) {\n    this.options = { ...this.options, ...options };\n    return this;\n  }\n  then(onfulfilled) {\n    return getCid(this.config, this.cid, this.options).then(onfulfilled);\n  }\n};\nvar OptimizeImageCreateSignedURL = class {\n  constructor(config, urlOpts) {\n    this.imgOpts = {};\n    this.config = config;\n    this.urlOpts = urlOpts;\n  }\n  optimizeImage(options) {\n    this.imgOpts = { ...this.imgOpts, ...options };\n    return this;\n  }\n  then(onfulfilled) {\n    return createSignedURL(this.config, this.urlOpts, this.imgOpts).then(\n      onfulfilled\n    );\n  }\n};\nvar Keys = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createKey(this.config, options);\n  }\n  list() {\n    return new FilterKeys(this.config);\n  }\n  revoke(keys) {\n    return revokeKeys(this.config, keys);\n  }\n};\nvar FilterKeys = class {\n  // rate limit vars\n  // private requestCount = 0;\n  // private lastRequestTime = 0;\n  // private readonly MAX_REQUESTS_PER_MINUTE = 30;\n  // private readonly MINUTE_IN_MS = 60000;\n  constructor(config) {\n    this.query = {};\n    this.config = config;\n  }\n  offset(offset) {\n    this.query.offset = offset;\n    return this;\n  }\n  revoked(revoked) {\n    this.query.revoked = revoked;\n    return this;\n  }\n  limitedUse(limitedUse) {\n    this.query.limitedUse = limitedUse;\n    return this;\n  }\n  exhausted(exhausted) {\n    this.query.exhausted = exhausted;\n    return this;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  then(onfulfilled) {\n    return listKeys(this.config, this.query).then(onfulfilled);\n  }\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    while (hasMore) {\n      this.query.offset = offset;\n      const items = await listKeys(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Groups = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createGroup(this.config, options);\n  }\n  list() {\n    return new FilterGroups(this.config);\n  }\n  get(options) {\n    return getGroup(this.config, options);\n  }\n  addFiles(options) {\n    return addToGroup(this.config, options);\n  }\n  removeFiles(options) {\n    return removeFromGroup(this.config, options);\n  }\n  update(options) {\n    return updateGroup(this.config, options);\n  }\n  delete(options) {\n    return deleteGroup(this.config, options);\n  }\n};\nvar FilterGroups = class {\n  constructor(config) {\n    this.query = {};\n    this.config = config;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  isPublic(isPublic) {\n    this.query.isPublic = isPublic;\n    return this;\n  }\n  pageToken(pageToken) {\n    this.query.pageToken = pageToken;\n    return this;\n  }\n  then(onfulfilled) {\n    return this.fetchPage().then((response) => {\n      this.nextPageToken = response.next_page_token;\n      return response;\n    }).then(onfulfilled);\n  }\n  async fetchPage() {\n    if (this.nextPageToken) {\n      this.query.pageToken = this.nextPageToken;\n    }\n    return listGroups(this.config, this.query);\n  }\n  // rate limit, hopefully temporary?\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      const response = await this.fetchPage();\n      for (const item of response.groups) {\n        yield item;\n      }\n      if (!response.next_page_token) {\n        break;\n      }\n      this.nextPageToken = response.next_page_token;\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Analytics = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n    this.requests = new AnalyticsRequests(this.config);\n    this.bandwidth = new AnalyticsBandwidth(this.config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n    this.requests.updateConfig(newConfig);\n    this.bandwidth.updateConfig(newConfig);\n  }\n  // detailed(options: {\n  // \tdomain: string;\n  // \tstart: string;\n  // \tend: string;\n  // \tsortBy: \"requests\" | \"bandwidth\";\n  // \tattribute:\n  // \t\t| \"cid\"\n  // \t\t| \"country\"\n  // \t\t| \"region\"\n  // \t\t| \"user_agent\"\n  // \t\t| \"referer\"\n  // \t\t| \"file_name\";\n  // }): TopAnalyticsBuilder {\n  // \treturn new TopAnalyticsBuilder(\n  // \t\tthis.config,\n  // \t\toptions.domain,\n  // \t\toptions.start,\n  // \t\toptions.end,\n  // \t\toptions.sortBy,\n  // \t\toptions.attribute,\n  // \t);\n  // }\n  summary(options) {\n    return new TimeIntervalAnalyticsBuilder(\n      this.config,\n      options.domain,\n      options.start,\n      options.end,\n      options.interval\n    );\n  }\n};\nvar calculateDates = (days) => {\n  const end = /* @__PURE__ */ new Date();\n  const start = /* @__PURE__ */ new Date();\n  start.setDate(start.getDate() - days);\n  return {\n    start: start.toISOString().split(\"T\")[0],\n    end: end.toISOString().split(\"T\")[0]\n  };\n};\nvar AnalyticsFilter = class {\n  constructor(config, domain, start, end) {\n    this.config = config;\n    this.query = {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      sort_by: \"requests\",\n      // Will be overridden in child classes\n      attribute: \"cid\"\n    };\n  }\n  cid(cid) {\n    this.query.attribute = \"cid\";\n    if (cid) {\n      this.query.cid = cid;\n    }\n    return this;\n  }\n  fileName(fileName) {\n    this.query.attribute = \"file_name\";\n    if (fileName) {\n      this.query.file_name = fileName;\n    }\n    return this;\n  }\n  userAgent(userAgent) {\n    this.query.attribute = \"user_agent\";\n    if (userAgent) {\n      this.query.user_agent = userAgent;\n    }\n    return this;\n  }\n  country(country) {\n    this.query.attribute = \"country\";\n    if (country) {\n      this.query.country = country;\n    }\n    return this;\n  }\n  region(region) {\n    this.query.attribute = \"region\";\n    if (region) {\n      this.query.region = region;\n    }\n    return this;\n  }\n  referer(referer) {\n    this.query.attribute = \"referer\";\n    if (referer) {\n      this.query.referer = referer;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  sort(order) {\n    this.query.sort_order = order;\n    return this;\n  }\n  days(numberOfDays) {\n    const { start, end } = calculateDates(numberOfDays);\n    this.query.start_date = start;\n    this.query.end_date = end;\n    return this;\n  }\n  then(onfulfilled) {\n    return analyticsTopUsage(this.config, this.query).then(onfulfilled);\n  }\n};\nvar AnalyticsRequests = class extends AnalyticsFilter {\n  constructor(config) {\n    super(config, \"\", \"\", \"\");\n    this.query.sort_by = \"requests\";\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  customDates(start, end) {\n    if (start)\n      this.query.start_date = start;\n    if (end)\n      this.query.end_date = end;\n    return this;\n  }\n  from(domain) {\n    this.query.gateway_domain = domain;\n    return this;\n  }\n};\nvar AnalyticsBandwidth = class extends AnalyticsFilter {\n  constructor(config) {\n    super(config, \"\", \"\", \"\");\n    this.query.sort_by = \"bandwidth\";\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  customDates(start, end) {\n    if (start)\n      this.query.start_date = start;\n    if (end)\n      this.query.end_date = end;\n    return this;\n  }\n  from(domain) {\n    this.query.gateway_domain = domain;\n    return this;\n  }\n};\nvar AnalyticsBuilder = class {\n  constructor(config, query) {\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n    this.query = query;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  fileName(fileName) {\n    this.query.file_name = fileName;\n    return this;\n  }\n  userAgent(userAgent) {\n    this.query.user_agent = userAgent;\n    return this;\n  }\n  country(country) {\n    this.query.country = country;\n    return this;\n  }\n  region(region) {\n    this.query.region = region;\n    return this;\n  }\n  referer(referer) {\n    this.query.referer = referer;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  sort(order) {\n    this.query.sort_order = order;\n    return this;\n  }\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async getAnalytics() {\n    throw new Error(\"getAnalytics method must be implemented in derived class\");\n  }\n  then(onfulfilled) {\n    return this.getAnalytics().then(onfulfilled);\n  }\n};\nvar TimeIntervalAnalyticsBuilder = class extends AnalyticsBuilder {\n  constructor(config, domain, start, end, dateInterval) {\n    super(config, {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      date_interval: dateInterval\n    });\n  }\n  sortBy(sortBy) {\n    this.query.sort_by = sortBy;\n    return this;\n  }\n  async getAnalytics() {\n    return analyticsDateInterval(this.config, this.query);\n  }\n  async all() {\n    return this.getAnalytics();\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pinata/dist/index.mjs\n");

/***/ })

};
;